/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
  tapping-term-ms = <500>;
};
&sk {
  release-after-ms = <2000>;
  quick-release;
}
;&sl {
  release-after-ms = <70>;
  ignore-modifiers;
};

/* Layers */
#define ALA0     0
#define ALA1     1
#define ALA2     2
#define ALA1_CPY 3
#define ALA2_CPY 4
#define ALA3     5
#define ALA4     6
#define NAS0     7
#define FUN0     8 
#define NAS0_CPY 9
#define FUN0_CPY 10  
#define NAS1     11
#define FUN1     12
#define NAS2     13
#define FUN2     14
#define MODL     15
#define MODR     16 

/ { 
  combos {
    compatible = "zmk,combos";

    // ALA1
    combo_j {
      timeout-ms = <70>;
      key-positions = <17 0>;
      bindings = <&kp J>;
    };
    combo_k {
      timeout-ms = <70>;
      key-positions = <17 1>;
      bindings = <&kp K>;
    };
    combo_v {
      timeout-ms = <70>;
      key-positions = <17 2>;
      bindings = <&kp V>;
    };
    combo_slash {
      timeout-ms = <70>;
      key-positions = <17 3>;
      bindings = <&slsbsls>;
    };
    combo_q {
      timeout-ms = <70>;
      key-positions = <17 4>;
      bindings = <&kp Q>;
    };
    combo_sqt {
      timeout-ms = <70>;
      key-positions = <17 5>;
      bindings = <&kp SQT>;
    };
    combo_w {
      timeout-ms = <70>;
      key-positions = <17 7>;
      bindings = <&kp W>;
    };
    combo_y {
      timeout-ms = <70>;
      key-positions = <17 8>;
      bindings = <&kp Y>;
    };
    combo_p {
      timeout-ms = <70>;
      key-positions = <17 9>;
      bindings = <&kp P>;
    };
    combo_c {
      timeout-ms = <70>;
      key-positions = <17 10>;
      bindings = <&kp C>;
    };
    combo_comma {
      timeout-ms = <70>;
      key-positions = <17 11>;
      bindings = <&kp COMMA>;
    };
    combo_z {
      timeout-ms = <70>;
      key-positions = <17 12>;
      bindings = <&kp Z>;
    };

    // ALA2
    combo_x {
      timeout-ms = <70>;
      key-positions = <14 0>;
      bindings = <&kp X>;
    };
    combo_m {
      timeout-ms = <70>;
      key-positions = <14 1>;
      bindings = <&kp M>;
    };
    combo_b {
      timeout-ms = <70>;
      key-positions = <14 2>;
      bindings = <&kp B>;
    };
    combo_lalt {
      timeout-ms = <70>;
      key-positions = <14 3>;
      bindings = <&sk LALT>;
    };
    combo_quesexcl {
      timeout-ms = <70>;
      key-positions = <14 4>;
      bindings = <&quesexcl>;
    };
    combo_semi {
      timeout-ms = <70>;
      key-positions = <14 5>;
      bindings = <&kp SEMI>;
    };
    combo_l {
      timeout-ms = <70>;
      key-positions = <14 7>;
      bindings = <&kp L>;
    };
    combo_f {
      timeout-ms = <70>;
      key-positions = <14 8>;
      bindings = <&kp F>;
    };
    combo_g {
      timeout-ms = <70>;
      key-positions = <14 9>;
      bindings = <&kp G>;
    };
    combo_hyphen {
      timeout-ms = <70>;
      key-positions = <14 10>;
      bindings = <&kp SLASH>;
    };
    combo_dot {
      timeout-ms = <70>;
      key-positions = <14 11>;
      bindings = <&kp DOT>;
    };
    combo_lbkt {
      timeout-ms = <70>;
      key-positions = <14 12>;
      bindings = <&kp LBKT>;
    };

    // NAS0
    combo_percent {
      timeout-ms = <70>;
      key-positions = <15 0>;
      bindings = <&kp LS(N5)>;
    };
    combo_ampersand {
      timeout-ms = <70>;
      key-positions = <15 1>;
      bindings = <&kp LS(N6)>;
    };
    combo_caret {
      timeout-ms = <70>;
      key-positions = <15 2>;
      bindings = <&kp EQUAL>;
    };
    combo_bspc {
      timeout-ms = <70>;
      key-positions = <15 3>;
      bindings = <&kp BSPC>;
    };
    combo_left {
      timeout-ms = <70>;
      key-positions = <15 4>;
      bindings = <&kp LEFT>;
    };
    combo_right {
      timeout-ms = <70>;
      key-positions = <15 5>;
      bindings = <&kp RIGHT>;
    };
    combo_modl {
      timeout-ms = <70>;
      key-positions = <15 7>;
      bindings = <&tog MODL>;
    };
    combo_tilde {
      timeout-ms = <70>;
      key-positions = <15 8>;
      bindings = <&kp RA(EQUAL)>;
    };
    combo_tab {
      timeout-ms = <70>;
      key-positions = <15 9>;
      bindings = <&kp TAB>;
    };
    combo_down {
      timeout-ms = <70>;
      key-positions = <15 10>;
      bindings = <&kp DOWN>;
    };
    combo_up {
      timeout-ms = <70>;
      key-positions = <15 11>;
      bindings = <&kp UP>;
    };
    combo_enter {
      timeout-ms = <70>;
      key-positions = <15 12>;
      bindings = <&kp ENTER>;
    };

    // NAS1
    combo_euro {
      timeout-ms = <70>;
      key-positions = <15 17 0>;
      bindings = <&kp RA(E)>;
    };
    combo_dollar {
      timeout-ms = <70>;
      key-positions = <15 17 1>;
      bindings = <&kp NUHS>;
    };
    combo_pound {
      timeout-ms = <70>;
      key-positions = <15 17 2>;
      bindings = <&kp LS(NUHS)>;
    };
    combo_del {
      timeout-ms = <70>;
      key-positions = <15 17 3>;
      bindings = <&kp DEL>;
    };
    combo_home {
      timeout-ms = <70>;
      key-positions = <15 17 4>;
      bindings = <&kp HOME>;
    };
    combo_end {
      timeout-ms = <70>;
      key-positions = <15 17 5>;
      bindings = <&kp END>;
    };
    combo_modr {
      timeout-ms = <70>;
      key-positions = <15 17 7>;
      bindings = <&kp MODR>;
    };
    combo_none {
      timeout-ms = <70>;
      key-positions = <15 17 8>;
      bindings = <&none>;
    };
    combo_actab {
      timeout-ms = <70>;
      key-positions = <15 17 9>;
      bindings = <&kp LC(LA(TAB))>;
    };
    combo_pgdn {
      timeout-ms = <70>;
      key-positions = <15 17 10>;
      bindings = <&kp PG_DN>;
    };
    combo_pgup {
      timeout-ms = <70>;
      key-positions = <15 17 11>;
      bindings = <&kp PG_UP>;
    };
    combo_equal {
      timeout-ms = <70>;
      key-positions = <15 17 12>;
      bindings = <&kp LS(N0)>;
    };

    // FUN0
    combo_w4 {
      timeout-ms = <70>;
      key-positions = <16 0>;
      bindings = <&kp RA(F4)>;
    };
    combo_w5 {
      timeout-ms = <70>;
      key-positions = <16 1>;
      bindings = <&kp RA(F5)>;
    };
    combo_w6 {
      timeout-ms = <70>;
      key-positions = <16 2>;
      bindings = <&kp RA(F6)>;
    };
    combo_w7 {
      timeout-ms = <70>;
      key-positions = <16 3>;
      bindings = <&kp RA(F7)>;
    };
    combo_w8 {
      timeout-ms = <70>;
      key-positions = <16 4>;
      bindings = <&kp RA(F8)>;
    };
    combo_w9 {
      timeout-ms = <70>;
      key-positions = <16 5>;
      bindings = <&kp RA(F9)>;
    };
    combo_w1 {
      timeout-ms = <70>;
      key-positions = <16 7>;
      bindings = <&kp RA(F1)>;
    };
    combo_w2 {
      timeout-ms = <70>;
      key-positions = <16 8>;
      bindings = <&kp RA(F2)>;
    };
    combo_w3 {
      timeout-ms = <70>;
      key-positions = <16 9>;
      bindings = <&kp RA(F3)>;
    };
    combo_wj {
      timeout-ms = <70>;
      key-positions = <16 10>;
      bindings = <&kp RA(J)>;
    };
    combo_wk {
      timeout-ms = <70>;
      key-positions = <16 11>;
      bindings = <&kp RA(K)>;
    };
    combo_wp {
      timeout-ms = <70>;
      key-positions = <16 12>;
      bindings = <&dwprctl>;
    };
  };
  
  behaviors {
    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <50>; // keep that low, e.g. with 100ms, it is possible to to quickly press RCTL (involving LSFT, and key.pos.16) and then select other desktop (also involving key.pos.16, but NOT LSFT) but LSFT then is still active, i.e. effectively MOVING current app to other desktop
      quick-release;
      ignore-modifiers;
    };
    
    
    hm_l: homerow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS_L";
      #binding-cells = <2>;
      tapping-term-ms = <300>;
      quick-tap-ms = <250>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <3 4 5 10 11 12 13 14>; // right hand
    };
    hm_r: homerow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS_R";
      #binding-cells = <2>;
      tapping-term-ms = <300>;
      quick-tap-ms = <250>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
      hold-trigger-key-positions = <0 1 2 6 7 8 9>; // left hand
    };
    sr: shift_layer {
      compatible = "zmk,behavior-hold-tap";
      label = "SHIFT_LAYER";
      #binding-cells = <2>;
      tapping-term-ms = <300>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&to>;
      retro-tap;
    };
    hl_l: homerow_layers_left {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_LAYERS_L";
      #binding-cells = <2>;
      tapping-term-ms = <220>;
      quick-tap-ms = <250>;
      flavor = "tap-preferred";
      bindings = <&mo>, <&kp>;
      hold-trigger-key-positions = <3 4 5 10 11 12 13 14>; // right hand
    };
    hl_r: homerow_layers_right {
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_LAYERS_R";
      #binding-cells = <2>;
      tapping-term-ms = <220>;
      quick-tap-ms = <250>;
      flavor = "tap-preferred";
      bindings = <&mo>, <&kp>;
      hold-trigger-key-positions = <0 1 2 6 7 8 9>; // left hand
    };
    td: tapdance {
      compatible = "zmk,behavior-hold-tap";
      label = "TAPDANCE";
      #binding-cells = <2>;
      tapping-term-ms = <190>;
      quick-tap-ms = <250>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };

    quesexcl: quesexcl {
      compatible = "zmk,behavior-mod-morph";
      label = "QUESTIONMARK_EXCLAMATIONMARK";
      #binding-cells = <0>;
      bindings = <&kp LS(MINUS)>, <&kp LS(RBKT)>;
      mods = <(MOD_LSFT)>;
    };
    
    slsbsls: slsbsls {
      compatible = "zmk,behavior-mod-morph";
      label = "SLASH_BACKSLASH";
      #binding-cells = <0>;
      bindings = <&kp LS(N7)>, <&kp RA(NUBS)>;
      mods = <(MOD_LSFT)>;
    };

    dwmi: dwm_m_i {
      compatible = "zmk,behavior-mod-morph";
      label = "DWM_FORWARD_INCREASE";
      #binding-cells = <0>;
      bindings = <&kp RA(M)>, <&kp RA(I)>;
      mods = <(MOD_LSFT)>;
    };
    
    dwtd: dwm_t_d {
      compatible = "zmk,behavior-mod-morph";
      label = "DWM_BACKWARD_DECREASE";
      #binding-cells = <0>;
      bindings = <&kp RA(T)>, <&kp RA(D)>;
      mods = <(MOD_LSFT)>;
    };
    
    dwprctl: dwm_p_rctl {
      compatible = "zmk,behavior-mod-morph";
      label = "DWM_OPEN_RCTL";
      #binding-cells = <0>;
      bindings = <&kp RA(P)>, <&kp RCTL>;
      mods = <(MOD_LSFT)>;
    };
    
    n7bspc: n7_bspc  {
      compatible = "zmk,behavior-mod-morph";
      label = "SEVEN_BACKSPACE";
      #binding-cells = <0>;
      bindings = <&kp N7>, <&kp BSPC>;
      mods = <(MOD_LSFT)>;
    };

    pipehash: pipe_hash  {
      compatible = "zmk,behavior-mod-morph";
      label = "PIPE_HASH";
      #binding-cells = <0>;
      bindings = <&kp RA(N7)>, <&kp RA(N3)>;
      mods = <(MOD_LSFT)>;
    };

    n9deg: n9_deg  {
      compatible = "zmk,behavior-mod-morph";
      label = "NINE_DEGREE";
      #binding-cells = <0>;
      bindings = <&kp N9>, <&kp LS(GRAVE)>;
      mods = <(MOD_LSFT)>;
    };

    aposgrave: apos_grave  {
      compatible = "zmk,behavior-mod-morph";
      label = "APOS_GRAVE";
      #binding-cells = <0>;
      bindings = <&kp MINUS>, <&kp LS(EQUAL)>;
      mods = <(MOD_LSFT)>;
    };

    tdwq: tap_dance_wq {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_DWM_QUIT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&none>, <&kp RA(LS(Q))>;
    };

    tdbtsel0: tap_dance_bt_sel0 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BT_SEL0";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&none>, <&bt BT_SEL 0>;
    };

    tdbtsel1: tap_dance_bt_sel1 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BT_SEL1";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&none>, <&bt BT_SEL 1>;
    };

    tdbtsel2: tap_dance_bt_sel2 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BT_SEL2";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&none>, <&bt BT_SEL 2>;
    };

    tdbtsel3: tap_dance_bt_sel3 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BT_SEL3";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&none>, <&bt BT_SEL 3>;
    };

    tdbtclr: tap_dance_bt_clr {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BT_CLR";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&none>, <&bt BT_CLR>;
    };

    
	  ala1macro: ala1_macro {
		  compatible = "zmk,behavior-macro";
		  label = "ALA1_MACRO";
		  #binding-cells = <0>;
		  bindings = < &sl  ALA1>;
	  };

	  ala2macro: ala2_macro {
		  compatible = "zmk,behavior-macro";
		  label = "ALA2_MACRO";
		  #binding-cells = <0>;
		  bindings = < &sl  ALA2>;
	  };
    
    hr: hold_repeat {
      compatible = "zmk,behavior-hold-tap";
      label = "HOLD_REPEAT";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <150>;
      quick-tap-ms = <150>;
      global-quick-tap;
      bindings = <&kp>, <&key_repeat>;
    };
    
  };

  
  conditional_layers {
    compatible = "zmk,conditional-layers";

    // Defining the directed activation of the conditional layers
    // ---------------------------------------------------------- 
   
    // ALA3 and ALA4

    to_ala3 {
      if-layers = <ALA1 ALA2>;
      then-layer = <ALA3>;
    };

    to_ala3_b {
      if-layers = <ALA1_CPY ALA2_CPY>;
      then-layer = <ALA3>;
    };

    to_ala4 {
      if-layers = <ALA1_CPY ALA2>;
      then-layer = <ALA4>;
    };

    to_ala4_b {
      if-layers = <ALA1 ALA2_CPY>;
      then-layer = <ALA4>;
    };

    
    // NAS2 and FUN2

    to_fun2 {
      if-layers = <FUN0 NAS0>;
      then-layer = <FUN2>;
    };

    to_fun2_b {
      if-layers = <FUN0_CPY NAS0_CPY>;
      then-layer = <FUN2>;
    };

    to_nas2 {
      if-layers = <FUN0_CPY NAS0>;
      then-layer = <NAS2>;
    };

    to_nas2_b {
      if-layers = <FUN0 NAS0_CPY>;
      then-layer = <NAS2>;
    };


    // Defining the UN-directed activation of the conditional layers
    // ------------------------------------------------------------- 

    to_nas1 {
      if-layers = <ALA1 NAS0>;
      then-layer = <NAS1>;
    };

    to_fun1 {
      if-layers = <ALA2 FUN0>;
      then-layer = <FUN1>;
    };

  };


  // keypositions
  //                  0       1       2                   3       4       5
  //          6       7       8       9                   10      11      12          13
  //                          14      15                  16      17
  keymap {
    compatible = "zmk,keymap";
    
    ala0 {
      label = "ALA0";
      bindings = <
      &kp N               &kp H               &kp D               &kp U               &kp O               &kp A
      &skq LSHIFT         &kp R               &kp S               &kp T               &kp SPACE           &kp E               &kp I               &mt LCTRL ESC
      &sl ALA2            &sl NAS0            &sl FUN0            &sl ALA1    
      >;
    };

    ala1 {
      label = "ALA1";
      bindings = <
      &kp J               &kp K               &kp V               &slsbsls            &kp Q               &kp SQT  
      &trans              &kp W               &kp Y               &kp P               &kp C               &kp COMMA           &kp Z               &trans
      &sl ALA2            &sl NAS0            &trans              &sl ALA1    
      >;
    };

    ala2 {
      label = "ALA2";
      bindings = <
      &kp X               &kp M               &kp B               &sk LALT            &quesexcl           &kp SEMI 
      &trans              &kp L               &kp F               &kp G               &kp SLASH           &kp DOT             &kp LBKT               &trans
      &sl ALA2            &trans              &sl FUN0            &sl ALA1_CPY
      >;
    };

    ala1_cpy {
      label = "ALA1_CPY";
      bindings = <
      &kp J               &kp K               &kp V               &slsbsls            &kp Q               &kp SQT  
      &trans              &kp W               &kp Y               &kp P               &kp C               &kp COMMA           &kp Z               &trans
      &sl ALA2_CPY        &sl NAS1            &trans              &sl ALA1_CPY
      >;
    };

    ala2_cpy {
      label = "ALA2_CPY";
      bindings = <
      &kp X               &kp M               &kp B               &sk LALT            &quesexcl           &kp SEMI 
      &trans              &kp L               &kp F               &kp G               &kp SLASH           &kp DOT             &kp LBKT               &trans
      &sl ALA2_CPY        &trans              &sl FUN1            &sl ALA1
      >;
    };

    ala3 {
      label = "ALA3";
      bindings = <
      &kp LS(N1)          &kp NUBS            &kp LS(NUBS)        &kp RA(SQT)         &kp RA(NUHS)        &pipehash
      &trans              &kp RA(N2)          &kp RA(LBKT)        &kp RA(RBKT)        &kp LS(N8)          &kp LS(N9)          &kp LS(N3)           &trans
      &trans              &trans              &trans              &trans              
      >;
    };

    ala4 {
      label = "ALA4";
      bindings = <
      &kp N4              &kp N5              &kp N6              &n7bspc             &kp N8              &n9deg
      &trans              &kp N1              &kp N2              &kp N3              &kp N0              &aposgrave          &kp LS(N2)          &trans
      &trans              &trans              &trans              &trans              
      >;
    };

    nas0 {
      label = "NAS0";
      bindings = <
      &kp LS(N5)          &kp LS(N6)          &kp EQUAL           &kp BSPC            &kp LEFT            &kp RIGHT
      &trans              &tog MODL           &kp RA(EQUAL)       &kp TAB             &kp DOWN            &kp UP              &kp ENTER           &trans
      &trans              &sl NAS0            &sl FUN0_CPY        &sl ALA1              
      >;
    };

    fun0 {
      label = "FUN0";
      bindings = <
      &kp RA(F4)          &kp RA(F5)          &kp RA(F6)          &kp RA(F7)          &kp RA(F8)          &kp RA(F9)           
      &trans              &kp RA(F1)          &kp RA(F2)          &kp RA(F3)          &kp RA(J)           &kp RA(K)           &dwprctl            &trans
      &sl ALA2            &sl NAS0            &sl FUN0            &trans              
      >;
    };
    
    nas0_cpy {
      label = "NAS0_CPY";
      bindings = <
      &kp LS(N5)          &kp LS(N6)          &kp EQUAL           &kp BSPC            &kp LEFT            &kp RIGHT
      &trans              &tog MODL           &kp RA(EQUAL)       &kp TAB             &kp DOWN            &kp UP              &kp ENTER           &trans
      &trans              &sl NAS0_CPY        &sl FUN0            &sl NAS1              
      >;
    };

    fun0_cpy {
      label = "FUN0_CPY";
      bindings = <
      &kp RA(F4)          &kp RA(F5)          &kp RA(F6)          &kp RA(F7)          &kp RA(F8)          &kp RA(F9)           
      &trans              &kp RA(F1)          &kp RA(F2)          &kp RA(F3)          &kp RA(J)           &kp RA(K)           &dwprctl            &trans
      &sl FUN1            &sl NAS0_CPY        &sl FUN0_CPY        &trans              
      >;
    };
    
    nas1 {
      label = "NAS1";
      bindings = <
      &kp RA(E)           &kp NUHS            &kp LS(NUHS)        &kp DEL             &kp HOME            &kp END   
      &trans              &tog MODR           &none               &kp LC(LA(TAB))     &kp PG_DN           &kp PG_UP           &kp LS(N0)          &trans
      &trans              &trans              &trans              &trans              
      >;
    };

    fun1 {
      label = "FUN1";
      bindings = <
      &tdwq               &kp RA(LS(C))       &kp LGUI            &kp RA(B)           &kp RA(H)           &kp RA(L)         
      &trans              &trans              &trans              &kp CAPS            &dwmi               &dwtd               &kp RA(ENTER)       &trans
      &trans              &trans              &trans              &trans              
      >;
    };

    nas2 {
      label = "NAS2";
      bindings = <
      &tdbtsel0           &tdbtsel1           &kp PSCRN           &kp GRAVE           &tdbtclr            &kp LS(SQT)   
      &trans              &tdbtsel2           &tdbtsel3           &kp SCROLLLOCK      &kp LS(N4)          &kp LS(SEMI)        &kp LS(LBRC)        &trans
      &trans              &trans              &trans              &trans              
      >;
    };
    
    fun2 {
      label = "FUN2";
      bindings = <
      &kp F4              &kp F5              &kp F6              &kp F7              &kp F8              &kp F9               
      &trans              &kp F1              &kp F2              &kp F3              &kp F10             &kp F11             &kp F12             &trans
      &trans              &trans              &trans              &trans              
      >;
    };

    modl {
      label = "MODL";
      bindings = <
      &kp RALT            &trans              &kp LGUI            &trans              &trans              &trans            
      &tog MODL           &kp LALT            &kp LSFT            &kp LCTL            &trans              &trans              &trans              &trans
      &trans              &trans              &trans              &trans              
      >;
    };

    modr {
      label = "MODR";
      bindings = <
      &trans              &trans              &trans              &kp RGUI            &trans              &kp RALT          
      &trans              &trans              &trans              &trans              &kp RCTL            &kp RSFT            &kp LALT            &tog MODR
      &trans              &trans              &trans              &trans              
      >;
    };
  };
};
