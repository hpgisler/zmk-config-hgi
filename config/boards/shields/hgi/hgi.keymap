/*
* Copyright (c) 2020 The ZMK Contributors
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
  tapping-term-ms = <500>;
};
&sk {
  release-after-ms = <2000>;
  quick-release;
}
;&sl {
  release-after-ms = <70>;
  ignore-modifiers;
};

/* Layers */
#define BASE      0
#define LAY1      1
#define LAY2      2 
#define LAY3      3
#define ALA1      4
#define ALA2      5
#define ALA1_CPY  6
#define ALA2_CPY  7
#define NAV1      8
#define NAV2      9
#define SYM1     10
#define SYM2     11
#define PAR2     12
#define NUM1     13
#define NUM2     14


/ { 
  
  behaviors {
    skq: sticky_key_quick_release {
      compatible = "zmk,behavior-sticky-key";
      label = "STICKY_KEY_QUICK_RELEASE";
      #binding-cells = <1>;
      bindings = <&kp>;
      release-after-ms = <50>; // keep that low, e.g. with 100ms, it is possible to to quickly press RCTL (involving LSFT, and key.pos.16) and then select other desktop (also involving key.pos.16, but NOT LSFT) but LSFT then is still active, i.e. effectively MOVING current app to other desktop
      quick-release;
      ignore-modifiers;
    };
    
    sr: shift_layer {
      compatible = "zmk,behavior-hold-tap";
      label = "SHIFT_LAYER";
      #binding-cells = <2>;
      tapping-term-ms = <300>;
      quick_tap_ms = <0>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&to>;
      retro-tap;
    };
    td: tapdance {
      compatible = "zmk,behavior-hold-tap";
      label = "TAPDANCE";
      #binding-cells = <2>;
      tapping-term-ms = <190>;
      quick-tap-ms = <250>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };

    n7bspc: n7_bspc  {
      compatible = "zmk,behavior-mod-morph";
      label = "SEVEN_BACKSPACE";
      #binding-cells = <0>;
      bindings = <&kp N7>, <&kp BSPC>;
      mods = <(MOD_LSFT)>;
    };

    tdwq: tap_dance_wq {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_DWM_QUIT";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&none>, <&kp RA(LS(Q))>;
    };

    tdbtsel0: tap_dance_bt_sel0 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BT_SEL0";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&none>, <&bt BT_SEL 0>;
    };

    tdbtsel1: tap_dance_bt_sel1 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BT_SEL1";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&none>, <&bt BT_SEL 1>;
    };

    tdbtsel2: tap_dance_bt_sel2 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BT_SEL2";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&none>, <&bt BT_SEL 2>;
    };

    tdbtsel3: tap_dance_bt_sel3 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BT_SEL3";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&none>, <&bt BT_SEL 3>;
    };

    tdbtclr: tap_dance_bt_clr {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_BT_CLR";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&none>, <&bt BT_CLR>;
    };
  };

  
  conditional_layers {
    compatible = "zmk,conditional-layers";

    // Defining the UN-directed activation of the conditional layers
    // ------------------------------------------------------------- 

    to_lay3 {
      if-layers = <LAY1 LAY2>;
      then-layer = <LAY3>;
    };

    to_nav2 {
      if-layers = <NAV1 ALA1>;
      then-layer = <NAV2>;
    };

    to_sym2 {
      if-layers = <SYM1 ALA2>;
      then-layer = <SYM2>;
    };

    to_par2 {
      if-layers = <NAV1 SYM1>;
      then-layer = <PAR2>;
    };

    to_num2 {
      if-layers = <NUM1 NAV1>;
      then-layer = <NUM2>;
    };
  };


  // keypositions
  //                  0       1       2                   3       4       5
  //          6       7       8       9                   10      11      12          13
  //                          14      15                  16      17
  keymap {
    compatible = "zmk,keymap";
    
    base {
      label = "BASE";
      bindings = <
      &none               &sl LAY2            &sl LAY1            &sl LAY1            &sl LAY2            &none                        
      &kp ESC             &sk  LALT           &sk LCTRL           &sk LSHIFT          &sk RSHIFT          &sk RCTRL           &sk  LALT           &sl NUM1
      &sl ALA2            &sl NAV1            &sl SYM1            &sl ALA1
      >;
    };


    
    ala1 {
      label = "ALA1";
      bindings = <
      &kp V               &kp F               &kp B               &kp Q               &kp SLASH           &kp J
      &kp K               &kp W               &kp M               &kp G               &kp P               &kp X               &kp Y               &kp Y
      &sl ALA2            &trans              &trans              &trans
      >;
    };

    ala2 {
      label = "ALA2";
      bindings = <
      &kp L               &kp H               &kp D               &kp C               &kp U               &kp O  
      &kp R               &kp N               &kp S               &kp T               &kp SPACE           &kp E               &kp A               &kp I
      &trans              &trans              &trans              &sl ALA1_CPY  
      >;
    };

    ala1_cpy {
      label = "ALA1_CPY";
      bindings = <
      &kp V               &kp F               &kp B               &kp Q               &kp SLASH           &kp J
      &kp K               &kp W               &kp M               &kp G               &kp P               &kp X               &kp Y               &kp Y
      &sl ALA2_CPY        &trans              &trans              &trans
      >;
    };

    ala2_cpy {
      label = "ALA2_CPY";
      bindings = <
      &kp L               &kp H               &kp D               &kp C               &kp U               &kp O  
      &kp R               &kp N               &kp S               &kp T               &kp SPACE           &kp E               &kp A               &kp I
      &trans              &trans              &trans              &sl ALA1
      >;
    };

    

    nav1 {
      label = "NAV1";
      bindings = <
      &kp LS(N5)          &kp RA(N3)          &kp LS(MINUS)       &kp BSPC            &kp LEFT            &kp RIGHT
      &kp RA(N2)          &kp EQUAL           &kp LS(N3)          &kp LS(N7)          &kp DOWN            &kp UP              &kp ENTER           &kp TAB  
      &trans              &trans              &trans              &trans              
      >;
    };

    nav2 {
      label = "NAV2";
      bindings = <
      &kp F10             &kp F11             &kp F12             &kp DEL             &kp HOME            &kp END
      &none               &kp F7              &kp F8              &kp F9              &kp PG_DN           &kp PG_UP           &none              &trans
      &trans              &trans              &trans              &trans              
      >;
    };

    

    sym1 {
      label = "SYM1";
      bindings = <
      &kp LS(N6)          &kp RA(N7)          &kp LS(RBKT)        &kp LS(COMMA)       &kp LS(DOT)          &kp LS(N2)
      &kp MINUS           &kp LS(SLASH)       &kp RA(EQUAL)       &kp RA(NUBS)        &kp COMMA            &kp DOT            &kp LS(EQUAL)       &trans
      &trans              &trans              &trans              &trans              
      >;
    };

    sym2 {
      label = "SYM2";
      bindings = <
      &kp F4              &kp F5              &kp F6              &kp LS(LBRC)        &kp LBKT            &kp SEMI         
      &trans              &kp F1              &kp F2              &kp F3              &kp LS(SEMI)        &kp LS(SQT)         &kp SQT             &kp LS(N4) 
      &trans              &trans              &trans              &trans              
      >;
    };


    
    par2 {
      label = "PAR2";
      bindings = <
      &none               &none               &none               &none               &none               &none      
      &kp NUBS            &kp RA(LBKT)        &kp RA(SQT)         &kp LS(N8)         &kp LS(N9)           &kp RA(NUHS)        &kp RA(RBKT)        &kp LS(NUBS) 
      &trans              &trans              &trans              &trans              
      >;
    };


    
    num1 {
      label = "NUM1";
      bindings = <
      &none               &kp LS(N1)          &none               &kp LS(GRAVE)       &kp GRAVE           &kp LS(NUHS)  
      &kp LS(N0)          &kp N7              &kp N8              &kp N9              &kp NUHS            &kp RA(E)           &none              &trans
      &trans              &trans              &trans              &trans              
      >;
    };

    num2 {
      label = "NUM2";
      bindings = <
      &kp N4              &kp N5              &kp N6              &none               &none               &none 
      &kp N0              &kp N1              &kp N2              &kp N3              &none               &none               &none              &trans
      &trans              &trans              &trans              &trans              
      >;
    };


    
    lay1 {
      label = "LAY1";
      bindings = <
      &tdbtsel0           &tdbtsel1           &kp SCROLLLOCK      &kp RA(B)           &kp RA(H)           &kp RA(L)         
      &tdbtclr            &tdbtsel2           &tdbtsel3           &kp CAPS            &kp RA(I)           &kp RA(D)           &kp PSCRN           &kp LGUI
      &trans              &trans              &trans              &trans              
      >;
    };
    
    lay2 {
      label = "LAY2";
      bindings = <
      &kp RA(F4)          &kp RA(F5)          &kp RA(F6)          &kp RA(F7)          &kp RA(F8)          &kp RA(F9)           
      &none               &kp RA(F1)          &kp RA(F2)          &kp RA(F3)          &kp RA(J)           &kp RA(K)           &kp RA(P)           &none
      &trans              &trans              &trans              &trans              
      >;
    };
    
    lay3 {
      label = "LAY3";
      bindings = <
      &kp LS(RA(F4))      &kp LS(RA(F5))      &kp LS(RA(F6))      &kp LS(RA(F7))      &kp LS(RA(F8))      &kp LS(RA(F9))           
      &tdwq               &kp LS(RA(F1))      &kp LS(RA(F2))      &kp LS(RA(F3))      &kp RA(M)           &kp RA(T)           &kp RA(ENTER)       &kp RA(LS(C))   
      &trans              &trans              &trans              &trans              
      >;
    };
  };
};
